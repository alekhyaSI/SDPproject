package com.tutorfinder.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tutorfinder.dto.StudentTutorMappingDTO;
import com.tutorfinder.dto.SubjectAvailabilityDTO;
import com.tutorfinder.model.StudentTutorMapping;
import com.tutorfinder.model.StudentProfile;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.repository.StudentProfileRepository;
import com.tutorfinder.repository.StudentTutorMappingRepository;
import com.tutorfinder.repository.TutorProfileRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AdminMappingService {

    @Autowired
    private StudentProfileRepository studentRepo;

    @Autowired
    private TutorProfileRepository tutorRepo;

    @Autowired
    private StudentTutorMappingRepository mappingRepo;

    private ObjectMapper mapper = new ObjectMapper();

    private List<SubjectAvailabilityDTO> parseSubjects(String json) {
        if (json == null || json.isEmpty()) return List.of();
        try {
            return mapper.readValue(json, new TypeReference<List<SubjectAvailabilityDTO>>() {});
        } catch (Exception e) {
            throw new RuntimeException("Error parsing subjects JSON", e);
        }
    }

    public StudentTutorMappingDTO mapStudentToTutor(Long studentId, Long tutorId, String subject, String availability) {
        StudentTutorMapping mapping = new StudentTutorMapping();
        mapping.setStudentId(studentId);
        mapping.setTutorId(tutorId);
        mapping.setSubject(subject);
        mapping.setAvailability(availability);

        mappingRepo.save(mapping);

        return new StudentTutorMappingDTO(mapping);
    }

    public List<StudentTutorMappingDTO> getAllMappings() {
        return mappingRepo.findAll().stream().map(StudentTutorMappingDTO::new).toList();
    }

    public void deleteMapping(Long mappingId) {
        mappingRepo.deleteById(mappingId);
    }

    public List<TutorProfile> getMatchingTutorsForStudent(Long studentId) {
        StudentProfile student = studentRepo.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));

        List<SubjectAvailabilityDTO> studentSubjects = parseSubjects(student.getSubjectsAvailabilityJson());

        return tutorRepo.findAll().stream()
                .filter(tutor -> {
                    List<SubjectAvailabilityDTO> tutorSubjects = parseSubjects(tutor.getSubjectsAvailabilityJson());
                    return tutorSubjects.stream().anyMatch(ts -> studentSubjects.stream()
                            .anyMatch(ss -> ss.getSubject().equalsIgnoreCase(ts.getSubject()) &&
                                    ss.getAvailability().replaceAll("\\s", "")
                                            .equalsIgnoreCase(ts.getAvailability().replaceAll("\\s", ""))));
                })
                .toList();
    }
}
