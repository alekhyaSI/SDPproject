package com.tutorfinder.controller;

import com.tutorfinder.dto.BookingResponseDTO;
import com.tutorfinder.model.Booking;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.model.User;
import com.tutorfinder.repository.TutorProfileRepository;
import com.tutorfinder.repository.UserRepository;
import com.tutorfinder.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/bookings")
@CrossOrigin("*")
public class BookingController {

    @Autowired
    private BookingService bookingService;

    @Autowired
    private TutorProfileRepository tutorProfileRepository;

    @Autowired
    private UserRepository userRepository;

    private BookingResponseDTO convertToDTO(Booking booking) {
        User student = userRepository.findById(booking.getStudentId())
                .orElseThrow(() -> new RuntimeException("Student not found"));

        TutorProfile tutorProfile = tutorProfileRepository.findByUserId(booking.getTutorId())
                .orElseThrow(() -> new RuntimeException("Tutor profile not found"));

        return new BookingResponseDTO(
                booking.getId(),
                student.getId(),
                student.getName(),
                student.getEmail(),
                student.getPhone(),
                tutorProfile.getUserId(),
                tutorProfile.getName(),
                booking.getStatus(),
                booking.getSubject(),
                booking.getTimeSlot()
        );
    }

    @PostMapping("/book")
    public BookingResponseDTO createBooking(@RequestBody Booking booking) {
        // Validate required fields
        if (booking.getStudentId() == null || booking.getTutorId() == null 
            || booking.getSubject() == null || booking.getTimeSlot() == null) {
            throw new RuntimeException("studentId, tutorId, subject and timeSlot are required");
        }

        // Check duplicate booking safely
        boolean exists = bookingService.getStudentBookings(booking.getStudentId()).stream()
                .anyMatch(b -> Objects.equals(b.getTutorId(), booking.getTutorId())
                        && Objects.equals(b.getTimeSlot(), booking.getTimeSlot())
                        && booking.getSubject().equalsIgnoreCase(b.getSubject()));

        if (exists) {
            throw new RuntimeException("You have already booked this tutor for the selected subject and time slot.");
        }

        Booking savedBooking = bookingService.createBooking(booking);
        return convertToDTO(savedBooking);
    }

    @GetMapping
    public List<BookingResponseDTO> getAllBookings() {
        return bookingService.getAllBookings().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    @PutMapping("/{bookingId}")
    public BookingResponseDTO updateBookingStatus(
            @PathVariable Long bookingId,
            @RequestBody Booking requestBody
    ) {
        Booking updated = bookingService.updateBookingStatus(bookingId, requestBody.getStatus());
        return convertToDTO(updated);
    }
}