package com.tutorfinder.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tutorfinder.dto.StudentProfileDTO;
import com.tutorfinder.dto.SubjectAvailabilityDTO;
import com.tutorfinder.dto.TutorProfileDTO;
import com.tutorfinder.model.Assignment;
import com.tutorfinder.model.StudentProfile;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.repository.AssignmentRepository;
import com.tutorfinder.repository.StudentProfileRepository;
import com.tutorfinder.repository.TutorProfileRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AdminService {

    @Autowired
    private StudentProfileRepository studentRepo;

    @Autowired
    private TutorProfileRepository tutorRepo;

    @Autowired
    private AssignmentRepository assignmentRepo;

    private ObjectMapper mapper = new ObjectMapper();

    // --- Parse JSON string to list ---
    private List<SubjectAvailabilityDTO> parseSubjects(String json) {
        if (json == null || json.isEmpty()) return List.of();
        try {
            return mapper.readValue(json, new TypeReference<List<SubjectAvailabilityDTO>>() {});
        } catch (Exception e) {
            throw new RuntimeException("Error parsing subjects JSON", e);
        }
    }

    // --- Get all students ---
    public List<StudentProfileDTO> getAllStudents() {
        return studentRepo.findAll().stream()
                .map(StudentProfileDTO::new)
                .toList();
    }

    // --- Get all tutors ---
    public List<TutorProfileDTO> getAllTutors() {
        return tutorRepo.findAll().stream()
                .map(TutorProfileDTO::new)
                .toList();
    }

    // --- Get tutors that match a student's subjects and availability ---
    public List<TutorProfileDTO> getMatchingTutorsForStudent(Long studentId) {
        StudentProfile studentEntity = studentRepo.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));
        StudentProfileDTO student = new StudentProfileDTO(studentEntity);

        List<TutorProfile> allTutors = tutorRepo.findAll();

        return allTutors.stream()
                .filter(tutor -> {
                    List<SubjectAvailabilityDTO> tutorSubjects = parseSubjects(tutor.getSubjectsAvailabilityJson());
                    return tutorSubjects.stream().anyMatch(ts ->
                            student.getSubjectsAvailability().stream().anyMatch(ss ->
                                    ts.getSubject().equalsIgnoreCase(ss.getSubject())
                                            && ts.getAvailability().replaceAll("\\s","")
                                            .equalsIgnoreCase(ss.getAvailability().replaceAll("\\s",""))
                            )
                    );
                })
                .map(TutorProfileDTO::new)
                .toList();
    }

    // --- Assign tutor to student ---
    public void assignTutorToStudent(Long studentId, Long tutorId) {
        Assignment assignment = new Assignment();
        assignment.setStudentId(studentId);
        assignment.setTutorId(tutorId);
        assignmentRepo.save(assignment);
    }
}
