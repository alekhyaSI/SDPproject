package com.tutorfinder.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tutorfinder.dto.SubjectAvailabilityDTO;
import com.tutorfinder.dto.TutorProfileDTO;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.model.User;
import com.tutorfinder.repository.TutorProfileRepository;
import com.tutorfinder.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class TutorProfileService {

    @Autowired
    private TutorProfileRepository tutorProfileRepository;

    @Autowired
    private UserRepository userRepository;

    private ObjectMapper mapper = new ObjectMapper();

    public TutorProfile saveOrUpdateProfile(Long userId, TutorProfile profile) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        TutorProfile existingProfile = tutorProfileRepository.findByUserId(userId).orElse(null);

        if (existingProfile == null) {
            profile.setUserId(userId);
            profile.setName(profile.getName() != null ? profile.getName() : user.getName());
            profile.setEmail(profile.getEmail() != null ? profile.getEmail() : user.getEmail());
            return tutorProfileRepository.save(profile);
        } else {
            existingProfile.setSubjectsAvailability(profile.getSubjectsAvailability());
            existingProfile.setExperience(profile.getExperience());
            existingProfile.setBio(profile.getBio());
            existingProfile.setHourlyRate(profile.getHourlyRate());
            existingProfile.setLocation(profile.getLocation());
            existingProfile.setName(profile.getName() != null ? profile.getName() : user.getName());
            existingProfile.setEmail(profile.getEmail() != null ? profile.getEmail() : user.getEmail());
            return tutorProfileRepository.save(existingProfile);
        }
    }

    public TutorProfileDTO getProfileWithUserInfo(Long userId) throws Exception {
        TutorProfile profile = tutorProfileRepository.findByUserId(userId).orElse(null);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found"));

        List<SubjectAvailabilityDTO> subjectsAvailability = null;
        if (profile != null && profile.getSubjectsAvailability() != null) {
            subjectsAvailability = mapper.readValue(profile.getSubjectsAvailability(),
                    new TypeReference<List<SubjectAvailabilityDTO>>() {});
        }

        return new TutorProfileDTO(
                profile != null ? profile.getId() : null,
                user.getName(),
                user.getEmail(),
                subjectsAvailability,
                profile != null ? profile.getExperience() : null,
                profile != null ? profile.getBio() : null,
                profile != null ? profile.getHourlyRate() : null,
                profile != null ? profile.getLocation() : null
        );
    }
}
