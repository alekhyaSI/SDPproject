package com.tutorfinder.service;

import com.tutorfinder.dto.StudentTutorMappingDTO;
import com.tutorfinder.model.StudentProfile;
import com.tutorfinder.model.StudentTutorMapping;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.repository.StudentProfileRepository;
import com.tutorfinder.repository.StudentTutorMappingRepository;
import com.tutorfinder.repository.TutorProfileRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class AdminMappingService {

    @Autowired
    private StudentTutorMappingRepository mappingRepository;

    @Autowired
    private StudentProfileRepository studentRepository;

    @Autowired
    private TutorProfileRepository tutorRepository;

    public StudentTutorMappingDTO mapStudentToTutor(Long studentId, Long tutorId, String subject, String availability) {
        StudentTutorMapping mapping = new StudentTutorMapping();
        mapping.setStudentId(studentId);
        mapping.setTutorId(tutorId);
        mapping.setSubject(subject);
        mapping.setAvailability(availability);
        mappingRepository.save(mapping);
        return new StudentTutorMappingDTO(mapping);
    }

    public List<StudentTutorMappingDTO> getAllMappings() {
        return mappingRepository.findAll().stream()
                .map(StudentTutorMappingDTO::new)
                .collect(Collectors.toList());
    }

    public void deleteMapping(Long mappingId) {
        mappingRepository.deleteById(mappingId);
    }

    public List<TutorProfile> getMatchingTutorsForStudent(Long studentId) {
        StudentProfile student = studentRepository.findById(studentId).orElse(null);
        if (student == null) return List.of();

        // Parse subjects + availability
        List<String> studentSubjects = student.getSubjectsAvailabilityJson().isEmpty()
                ? List.of() 
                : List.of(student.getSubjectsAvailabilityJson().split(",")); 

        List<String> studentAvailability = student.getAvailabilityJson().isEmpty()
                ? List.of()
                : List.of(student.getAvailabilityJson().split(",")); 

        return tutorRepository.findAll().stream()
                .filter(tutor -> {
                    List<String> tutorSubjects = List.of(tutor.getSubjectsAvailabilityJson().split(","));
                    List<String> tutorAvailability = List.of(tutor.getAvailabilityJson().split(","));

                    // match at least one subject AND one availability
                    return studentSubjects.stream().anyMatch(tutorSubjects::contains) &&
                           studentAvailability.stream().anyMatch(tutorAvailability::contains);
                })
                .collect(Collectors.toList());
    }
}