package com.tutorfinder.model;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "tutor_profiles")
public class TutorProfile {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String availability;
    private String bio;
    private Integer experience;
    private Integer hourlyRate;
    private String location;

    @Column(columnDefinition = "TEXT") // store JSON string
    private String subjects;

    private Long userId;
    private String name;
    private String email;

    @Transient
    private List<String> subjectsArray = new ArrayList<>();

    // ====== Getters and Setters ======

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getAvailability() { return availability; }
    public void setAvailability(String availability) { this.availability = availability; }

    public String getBio() { return bio; }
    public void setBio(String bio) { this.bio = bio; }

    public Integer getExperience() { return experience; }
    public void setExperience(Integer experience) { this.experience = experience; }

    public Integer getHourlyRate() { return hourlyRate; }
    public void setHourlyRate(Integer hourlyRate) { this.hourlyRate = hourlyRate; }

    public String getLocation() { return location; }
    public void setLocation(String location) { this.location = location; }

    public String getSubjects() { return subjects; }
    public void setSubjects(String subjects) { this.subjects = subjects; }

    public Long getUserId() { return userId; }
    public void setUserId(Long userId) { this.userId = userId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public List<String> getSubjectsArray() {
        try {
            if (subjects != null && !subjects.isEmpty()) {
                ObjectMapper mapper = new ObjectMapper();
                return mapper.readValue(subjects, new TypeReference<List<String>>() {});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new ArrayList<>();
    }

    public void setSubjectsArray(List<String> subjectsArray) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            this.subjects = mapper.writeValueAsString(subjectsArray);
            this.subjectsArray = subjectsArray;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
