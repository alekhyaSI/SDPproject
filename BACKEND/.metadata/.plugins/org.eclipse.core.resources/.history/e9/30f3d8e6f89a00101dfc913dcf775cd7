package com.tutorfinder.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tutorfinder.dto.StudentProfileDTO;
import com.tutorfinder.dto.StudentTutorMappingDTO;
import com.tutorfinder.dto.SubjectAvailabilityDTO;
import com.tutorfinder.dto.TutorProfileDTO;
import com.tutorfinder.model.StudentProfile;
import com.tutorfinder.model.StudentTutorMapping;
import com.tutorfinder.model.TutorProfile;
import com.tutorfinder.repository.StudentProfileRepository;
import com.tutorfinder.repository.StudentTutorMappingRepository;
import com.tutorfinder.repository.TutorProfileRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AdminMappingService {

    @Autowired
    private StudentProfileRepository studentRepo;

    @Autowired
    private TutorProfileRepository tutorRepo;

    @Autowired
    private StudentTutorMappingRepository mappingRepo;

    private ObjectMapper mapper = new ObjectMapper();

    // Parse JSON string of subjects + availability
    private List<SubjectAvailabilityDTO> parseSubjects(String json) {
        if (json == null || json.isEmpty()) return List.of();
        try {
            return mapper.readValue(json, new TypeReference<List<SubjectAvailabilityDTO>>() {});
        } catch (Exception e) {
            throw new RuntimeException("Error parsing subjects JSON", e);
        }
    }

    // Map student to tutor for a specific subject & availability
    public StudentTutorMappingDTO mapStudentToTutor(Long studentId, Long tutorId, String subject, String availability) {
        StudentProfile student = studentRepo.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));
        TutorProfile tutor = tutorRepo.findById(tutorId)
                .orElseThrow(() -> new RuntimeException("Tutor not found"));

        // Optional: Validate that tutor has that subject + availability
        boolean canTeach = parseSubjects(tutor.getSubjectsAvailabilityJson()).stream()
                .anyMatch(ts ->
                        ts.getSubject().equalsIgnoreCase(subject) &&
                        ts.getAvailability().replaceAll("\\s", "").equalsIgnoreCase(availability.replaceAll("\\s", ""))
                );

        if (!canTeach) {
            throw new RuntimeException("Tutor does not have the requested subject/availability");
        }

        // Save mapping
        StudentTutorMapping mapping = new StudentTutorMapping();
        mapping.setStudent(student);
        mapping.setTutor(tutor);
        mapping.setSubject(subject);
        mapping.setAvailability(availability);

        mapping = mappingRepo.save(mapping);

        return new StudentTutorMappingDTO(mapping);
    }

    // Get all mappings
    public List<StudentTutorMappingDTO> getAllMappings() {
        return mappingRepo.findAll().stream()
                .map(StudentTutorMappingDTO::new)
                .toList();
    }

    // Delete mapping
    public void deleteMapping(Long mappingId) {
        mappingRepo.deleteById(mappingId);
    }

    // Get tutors matching student's subjects & availability
    public List<TutorProfileDTO> getMatchingTutorsForStudent(Long studentId) {
        StudentProfile student = studentRepo.findById(studentId)
                .orElseThrow(() -> new RuntimeException("Student not found"));

        StudentProfileDTO studentDTO = new StudentProfileDTO(student);

        return tutorRepo.findAll().stream()
                .filter(tutor -> parseSubjects(tutor.getSubjectsAvailabilityJson()).stream()
                        .anyMatch(ts -> studentDTO.getSubjectsAvailability().stream()
                                .anyMatch(ss ->
                                        ts.getSubject().equalsIgnoreCase(ss.getSubject()) &&
                                        ts.getAvailability().replaceAll("\\s","")
                                                .equalsIgnoreCase(ss.getAvailability().replaceAll("\\s",""))
                                )
                        )
                )
                .map(TutorProfileDTO::new)
                .toList();
    }
}
